// <auto-generated />
using System;
using HangmanDELL.API.Data.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HangmanDELL.API.Migrations
{
    [DbContext(typeof(HangmanDbContext))]
    [Migration("20231121012236_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HangmanDELL.API.Entities.Guess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 20, 22, 22, 36, 182, DateTimeKind.Local).AddTicks(3547))
                        .HasColumnName("creation");

                    b.Property<string>("GuessedLetter")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("guessed_letter");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit")
                        .HasColumnName("is_success");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Guesses", (string)null);
                });

            modelBuilder.Entity("HangmanDELL.API.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip_address");

                    b.Property<string>("IpPort")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("ip_port");

                    b.Property<int>("NumberOfLives")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasColumnName("number_of_lives");

                    b.Property<string>("WordProgress")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("word_progress");

                    b.Property<string>("WordToGuess")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("word_to_guess");

                    b.HasKey("Id");

                    b.ToTable("Histories", (string)null);
                });

            modelBuilder.Entity("HangmanDELL.API.Entities.Guess", b =>
                {
                    b.HasOne("HangmanDELL.API.Entities.History", "History")
                        .WithMany("Guesses")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_History_Guess");

                    b.Navigation("History");
                });

            modelBuilder.Entity("HangmanDELL.API.Entities.History", b =>
                {
                    b.Navigation("Guesses");
                });
#pragma warning restore 612, 618
        }
    }
}
